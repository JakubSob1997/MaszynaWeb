{
  "instructionList": {
    "instructionDataArray": [
      {
        "name": "STP",
        "sourceCode": "// Stops the program execution\n// Zatrzymuje działanie programu\nROZKAZ STP;\nARGUMENTY 0;\nczyt wys wei il;\nstop;\n"
      },
      {
        "name": "DOD",
        "sourceCode": "// Adds value from Memory[AD] to AK\n// Dodaje wartość z Pemięci[AD] do AK\nROZKAZ DOD;\nczyt wys wei il;\nwyad wea eni\nJEzELI INT TO @przerw GDY NIE @norm;\n@norm czyt wys weja dod weak wyl wea KONIEC;\n@przerw czyt wys weja dod weak dws;\nwyls wes wyws wea;\npisz;\nwyap wel wea rint;"
      },
      {
        "name": "ODE",
        "sourceCode": "// Substracts value from Memory[AD] to AK\n// Odejmuje wartość z Pemięci[AD] do AK\nROZKAZ ODE;\nczyt wys wei il;\nwyad wea eni\nJEzELI INT TO @przerw GDY NIE @norm;\n@norm czyt wys weja ode weak wyl wea KONIEC;\n@przerw czyt wys weja ode weak dws;\nwyls wes wyws wea;\npisz;\nwyap wel wea rint;"
      },
      {
        "name": "POB",
        "sourceCode": "// Reads value from Memory[AD] to AK\n// Pobiera wartość z Pemięci[AD] do AK\nROZKAZ POB;\nczyt wys wei il;\nwyad wea eni\nJEzELI INT TO @przerw GDY NIE @norm;\n@norm czyt wys weja przep weak wyl wea KONIEC;\n@przerw czyt wys weja przep weak dws;\nwyls wes wyws wea;  //save (L)->stack\npisz;\nwyap wel wea rint;"
      },
      {
        "name": "LAD",
        "sourceCode": "// Loads value from AK into the Memory[AD] \n// Ładuje wartość z AK do Pemięci[AD]\nROZKAZ LAD;\nczyt wys wei il;\nwyad wea wyak wes eni\nJEzELI INT TO @przerw GDY NIE @norm;\n@norm pisz wyl wea KONIEC;\n@przerw pisz dws;\nwyls wes wyws wea;\npisz;\nwyap wel wea rint;"
      },
      {
        "name": "SOB",
        "sourceCode": "// Unconditional jump to AD addres \n// Skok bezwarunkowy do adresu AD\nROZKAZ SOB;\nczyt wys wei il;\nwyad wea wel;\n"
      },
      {
        "name": "SOM",
        "sourceCode": "// Jump when AK<0 to AD addres \n// Skok gdu AK<0 do adresu AD\nROZKAZ SOM;\nczyt wys wei il;\nJEZELI Z TO @negative GDY NIE @positive;\n@negative wyad wea wel KONIEC;\n@positive wyl wea;"
      },
      {
        "name": "SOZ",
        "sourceCode": "// Jump when AK==0 to AD addres \n// Skok gdu AK==0 do adresu AD\nROZKAZ SOZ;\nczyt wys wei il;\nJEzELI zak TO @zero GDY NIE @notzero;\n@zero wyad wea wel KONIEC;\n@notzero wyl wea;"
      },
      {
        "name": "IN",
        "sourceCode": "// read sign from external device\nROZKAZ IN;\nczyt wys wei il;\nstart wyak weja ode weak;\n@czekaj wyg weja ode weak JEzELI Z to @dalej GDY NIE @czekaj;\n@dalej wyrb weja przep weak wyl wea;"
      },
      {
        "name": "OUT",
        "sourceCode": "\nROZKAZ OUT;\nczyt wys wei il;\nwyak wes weja ode weak werb start eni;\n@wait JEzELI INT TO @interrupt GDY NIE @norm;\n@norm wyg weja ode weak JEzELI Z TO @done GDY NIE @wait;\n@done wys weja przep weak wyl wea KONIEC;\n@interrupt wys weja przep weak dws;\t//\nwyls wes wyws wea;           //  (L) -> stack\npisz;\nwyap wel wea rint;     //  (AP)->L,A"
      },
      {
        "name": "GOS",
        "sourceCode": "rozkaz GOS; //give on stack;\nargumenty 0;\nczyt wys wei il;\ndws;\nwyws wea wyak wes;\npisz wyl wea;"
      },
      {
        "name": "RFI",
        "sourceCode": "rozkaz RFI; //return from the interrupt\nargumenty 0;\nczyt wys wei il;\nwyws wea iws;\nczyt wys as wea wel;"
      },
      {
        "name": "TFS",
        "sourceCode": "rozkaz TFS; // take from stack\nargumenty 0;\nczyt wys wei il;\nwyws wea iws;\nczyt wys weja przep weak wyl wea;"
      },
      {
        "name": "MAS",
        "sourceCode": "// Set Mask  (immediate addressing)\nROZKAZ MAS;\nczyt wys wei il;\nwyad werm;\nwyl wea;"
      },
      {
        "name": "MASOLD",
        "sourceCode": "// Set Mask (direct addressing)\nROZKAZ MasOld;\nczyt wys wei il;\nwyad wea;\nczyt wys as werm;\nwyl wea;"
      },
      {
        "name": "RMAS",
        "sourceCode": "// reading of the mask register\nROZKAZ RMAS;\nczyt wys wei il;\nwyad wea;\nwyrm as wes;\npisz wyl wea;"
      }
    ]
  },
  "settings": {
    "codeWidth": 6,
    "adressWidth": 7,
    "extensionData": {
      "BusConnection": true,
      "AK_Increment": true,
      "ALU_Logic": true,
      "ALU_ExtendedMath": true,
      "Stack": true,
      "X_Register": true,
      "Y_Register": true,
      "Interupt": true,
      "InputOutput": true,
      "Flags": true,
      "T_Register": true
    },
    "intAdressList": [
      1,
      2,
      3,
      4
    ]
  },
  "program": "SOB start\nSOB thread\nRFI\nRFI\nRFI\n\nstart:\n\tOUT 3\n\tPOB delay\n\tOUT 7\nouterLoop:\n    POB _A\n    \ninnerLoop:\n\tOUT 2\n    LAD letterIter\n    DOD _1\n    ODE _Z\n    SOM notZ\n    SOB wasZ\nnotZ:\n    DOD _Z\n    SOB innerLoop\nwasZ:\n\tPOB _Z\n    OUT 2\n    POB _NL\n    OUT 2\n\tSOB outerLoop\n    \nthread:\n\tMAS %1111\n    GOS\n\tPOB counter\n    DOD _1\n    LAD counter\n    OUT 4\n    POB delay\n    OUT 7\n    TFS\n    MAS %0000\n    RFI\n    \n\ncounter: RST 0\n_1: RST 1\ndelay: RST 150\n\n\nletterIter: RPA\n_A: RST #41\n_Z: RST #5a\n_NL: RST 13\n\n\n\n"
}