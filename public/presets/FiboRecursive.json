{
	"instructionList": {
		"instructionDataArray": [
			{
				"name": "STP",
				"sourceCode": "ROZKAZ STP;\nARGUMENTY 0;\nczyt wys wei il;\nstop;\n"
			},
			{
				"name": "DOD",
				"sourceCode": "ROZKAZ DOD;\nczyt wys wei il;\nwyad wea;\nwyl wea czyt wys weja dod weak;\n"
			},
			{
				"name": "ODE",
				"sourceCode": "ROZKAZ ODE;\nczyt wys wei il;\nwyad wea;\nwyl wea czyt wys weja ode weak;\n"
			},
			{
				"name": "POB",
				"sourceCode": "ROZKAZ POB;\nczyt wys wei il;\nwyad wea;\nwyl wea czyt wys weja przep weak;\n"
			},
			{
				"name": "LAD",
				"sourceCode": "ROZKAZ LAD;\nczyt wys wei il;\nwyad wea wyak wes;\npisz wyl wea;\n"
			},
			{
				"name": "SOB",
				"sourceCode": "ROZKAZ SOB;\nczyt wys wei il;\nwyad wea wel;\n"
			},
			{
				"name": "SOM",
				"sourceCode": "ROZKAZ SOM;\nczyt wys wei il;\nJEZELI Z @skok;\nwyl wea KONIEC;\n@skok wyad wea wel;\n"
			},
			{
				"name": "SOZ",
				"sourceCode": "ROZKAZ SOZ;\nczyt wys wei il;\nJEZELI ZAK @skok;\nwyl wea KONIEC;\n@skok wyad wea wel;\n"
			},
			{
				"name": "IN",
				"sourceCode": "ROZKAZ IN;\nczyt wys wei il;\nwyak weja ode weak start;\n@wait wyg weja ode weak;\nJEzELI Z TO @done GDY NIE @wait;\n@done wyrb weja przep weak wyl wea;"
			},
			{
				"name": "OUT",
				"sourceCode": "ROZKAZ OUT;\nczyt wys wei il;\nwyak werb wes weja ode weak start;\n@wait wyg weja ode weak;\nJezeli z to @done gdy nie @wait;\n@done wys weja przep weak wyl wea;"
			},
			{
				"name": "FIBO",
				"sourceCode": "ROZKAZ FIBO;\n//SETUP\nczyt wys wei il;\nwyak weja ode weak;\nwyws wes as;\nwyak wex iak wyad wews;\nwyak wey;\n\n// Ws check\n@loop\nwyws as weak przep weja;\nJEZELI ZAK @end_x;\n\n// Add x\nwyy przep weak weja;\nwyx dod weak weja;\nwyak wex dws;\n\n\n// Ws check\nwyws as weak przep weja;\nJEZELI ZAK @end_y;\n\n//Add y\nwyx przep weak weja;\nwyy dod weak weja;\nwyak wey dws;\nJEZELI NIE Z @loop;\nJEZELI Z @loop;\n\n//End\n@end_x wyx weja przep weak;\nJEZELI NIE Z @end;\nJEZELI Z @end;\n@end_y wyy weja przep weak;\n\n@end\nwyl wea;\nwys as wews;\n\n\n"
			},
			{
				"name": "CALL",
				"sourceCode": "ROZKAZ CALL;\nczyt wys wei il;\ndws wyls wes;\nwyws wea;\npisz wyad wel wea;\n"
			},
			{
				"name": "RET",
				"sourceCode": "ROZKAZ RET;\nARGUMENTY 0;\nczyt wys wei il;\nwyws wea iws;\nczyt wys as wel wea;\n"
			},
			{
				"name": "PSH",
				"sourceCode": "ROZKAZ PSH;\nARGUMENTY 0;\nczyt wys wei il;\nwyak wes dws;\nwyws wea;\npisz wyl wea;\n\n"
			},
			{
				"name": "PSHAD",
				"sourceCode": "ROZKAZ PSHAD;\nczyt wys wei il;\nwyad wea dws;\nczyt wyws wea;\npisz wyl wea;\n\n"
			},
			{
				"name": "POP",
				"sourceCode": "ROZKAZ POP;\nARGUMENTY 0;\nczyt wys wei il;\nwyws wea iws;\nczyt wys weja przep weak wyl wea;\n\n"
			},
			{
				"name": "POPAD",
				"sourceCode": "ROZKAZ POPAD;\nczyt wys wei il;\nwyws wea iws;\nczyt wyad wea;\npisz wyl wea;\n\n"
			},
			{
				"name": "TOP",
				"sourceCode": "ROZKAZ TOP;\nARGUMENTY 0;\nczyt wys wei il;\nwyws wea;\nczyt wys weja przep weak wyl wea;\n\n"
			},
			{
				"name": "TOPN",
				"sourceCode": "ROZKAZ TOPN;\nczyt wys wei il;\nwyws as weja przep weak;\nwyad as weja dod weak;\nwyak as wea;\nczyt wys weja przep weak wyl wea;\n\n"
			}
		]
	},
	"settings": {
		"codeWidth": 6,
		"adressWidth": 7,
		"extensionData": {
			"BusConnection": true,
			"AK_Increment": true,
			"ALU_Logic": true,
			"ALU_ExtendedMath": true,
			"Stack": true,
			"X_Register": true,
			"Y_Register": true,
			"Interupt": true,
			"InputOutput": true,
			"Flags": true
		},
		"intAdressList": [
			1,
			2,
			3,
			4
		]
	},
	"program": "\n\n\nSOB start\nfiboARG: RST 15\ncounter: RST 0\n_0: RST 0\n_1: RST 1\n_2: RST 2\n_3: RST 3\n\n//\tclrAlerts();\n//\tfor(counter =0; counter<=fiboARG;counter++){\n//\t\talert(fiboRecursive(counter));\n//\t}\n\nstart: \n  OUT 5\n  POB counter\ncheck:\n  ODE fiboARG\n  SOM continue\n  SOZ continue\n  SOB end\n\ncontinue:\n  DOD fiboARG\n  SOB call\n\n\ncall:  \n  PSH\n  CALL fiboRecursive\n  OUT 4\n  POP\n\n  POB counter\n  DOD _1\n  LAD counter\n  SOB check\n\nend:\n  STP\n\n\n// fiboRecursive(int n){\n//  if(n<=0)return 0;\n//  if(n<3)return 1;\n//  return fiboRecursive(n-1) + fiboRecursive(n-2);\n// }\n\nfiboRecursive:\n  TOPN 1 //AK = n\n  SOM default_0 //if(n<0)\n  SOZ default_0 //if(n==0)\n  ODE _3 //AK=n-3\n  SOM default_1 //if(n<3)\n  DOD _2 //AK=n-1\n  \n  PSH //PSH n-1\n  CALL fiboRecursive //fiboRecursive(n-1)\n  POPAD tmp // tmp = n-1\n  PSH // PSH fiboRec(n-1)\n  POB tmp //AK = n-1\n  ODE _1 //AK = n-2\n  \n  PSH //PSH n-2\n  CALL fiboRecursive //fiboRec(n-2)\n  LAD tmp // tmp = fiboRec(n-2)\n  POP // n-2\n  POP // AK = fiboRec(n-1)\n  DOD tmp // AK += fiboRec(n-2)\n  RET \n\ndefault_0:\n  POB _0\n  RET\n  \ndefault_1:\n  POB _1\n  RET\n\ntmp: RPA\n//END fiboRecursive\n"
}